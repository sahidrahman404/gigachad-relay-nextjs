"""
The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer.
"""
directive @defer(if: Boolean = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT

directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION

input ActivateUserInput {
  tokenPlainText: String!
}

input ActivationTokenInput {
  email: String!
}

type AuthenticationToken {
  user: User!
  tokenPlainText: String!
}

input CreateExerciseInput {
  name: String!
  image: ImageInput
  howTo: String
  userID: ID
  musclesGroupIDs: [ID!]
  exerciseTypeIDs: [ID!]
}

"""
CreateExerciseTypeInput is used for create ExerciseType object.
Input was generated by ent.
"""
input CreateExerciseTypeInput {
  name: String!
  properties: [String!]!
  description: String!
  exerciseIDs: [ID!]
}

input CreateMusclesGroupInput {
  name: String!
  image: ImageInput!
}

input CreateRoutineExerciseInput {
  restTimer: String
  sets: [SetInput!]
  exerciseID: ID!
}

"""
CreateRoutineInput is used for create Routine object.
Input was generated by ent.
"""
input CreateRoutineInput {
  name: String!
  exerciseIDs: [ID!]
  usersID: ID!
}

input CreateRoutineWithChildrenInput {
  name: String!
  routineExercises: [CreateRoutineExerciseInput!]
}

"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  email: String!
  username: String!
  hashedPassword: String!
  name: String!
  tokenIDs: [ID!]
  exerciseIDs: [ID!]
  routineIDs: [ID!]
  workoutIDs: [ID!]
  workoutLogIDs: [ID!]
}

"""
CreateWorkoutInput is used for create Workout object.
Input was generated by ent.
"""
input CreateWorkoutInput {
  name: String!
  volume: Int!
  reps: Int!
  time: String
  sets: Int!
  image: String
  description: String!
  usersID: ID!
  workoutLogIDs: [ID!]
}

"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor

input DeleteExerciseInput {
  id: ID!
}

type DeletedID {
  id: ID
}

type Equipment implements Node {
  id: ID!
  name: String!
  image: Image
  exercises(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Exercises returned from the connection."""
    orderBy: ExerciseOrder

    """Filtering options for Exercises returned from the connection."""
    where: ExerciseWhereInput
  ): ExerciseConnection!
}

"""A connection to a list of items."""
type EquipmentConnection {
  """A list of edges."""
  edges: [EquipmentEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type EquipmentEdge {
  """The item at the end of the edge."""
  node: Equipment

  """A cursor for use in pagination."""
  cursor: Cursor!
}

"""Ordering options for Equipment connections"""
input EquipmentOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC

  """The field by which to order EquipmentSlice."""
  field: EquipmentOrderField!
}

"""Properties by which Equipment connections can be ordered."""
enum EquipmentOrderField {
  ID
}

"""
EquipmentWhereInput is used for filtering Equipment objects.
Input was generated by ent.
"""
input EquipmentWhereInput {
  not: EquipmentWhereInput
  and: [EquipmentWhereInput!]
  or: [EquipmentWhereInput!]

  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID

  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String

  """exercises edge predicates"""
  hasExercises: Boolean
  hasExercisesWith: [ExerciseWhereInput!]
}

type Exercise implements Node {
  id: ID!
  name: String!
  image: Image
  howTo: String
  userID: ID
  workoutLogs(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for WorkoutLogs returned from the connection."""
    orderBy: WorkoutLogOrder

    """Filtering options for WorkoutLogs returned from the connection."""
    where: WorkoutLogWhereInput
  ): WorkoutLogConnection!
  users: User
  equipment(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for EquipmentSlice returned from the connection."""
    orderBy: EquipmentOrder

    """Filtering options for EquipmentSlice returned from the connection."""
    where: EquipmentWhereInput
  ): EquipmentConnection!
  musclesGroups(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for MusclesGroups returned from the connection."""
    orderBy: MusclesGroupOrder

    """Filtering options for MusclesGroups returned from the connection."""
    where: MusclesGroupWhereInput
  ): MusclesGroupConnection!
  exerciseTypes(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for ExerciseTypes returned from the connection."""
    orderBy: ExerciseTypeOrder

    """Filtering options for ExerciseTypes returned from the connection."""
    where: ExerciseTypeWhereInput
  ): ExerciseTypeConnection!
  routines(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Routines returned from the connection."""
    orderBy: RoutineOrder

    """Filtering options for Routines returned from the connection."""
    where: RoutineWhereInput
  ): RoutineConnection!
  routineExercises(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for RoutineExercises returned from the connection."""
    orderBy: RoutineExerciseOrder

    """Filtering options for RoutineExercises returned from the connection."""
    where: RoutineExerciseWhereInput
  ): RoutineExerciseConnection!
}

"""A connection to a list of items."""
type ExerciseConnection {
  """A list of edges."""
  edges: [ExerciseEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type ExerciseEdge {
  """The item at the end of the edge."""
  node: Exercise

  """A cursor for use in pagination."""
  cursor: Cursor!
}

"""Ordering options for Exercise connections"""
input ExerciseOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC

  """The field by which to order Exercises."""
  field: ExerciseOrderField!
}

"""Properties by which Exercise connections can be ordered."""
enum ExerciseOrderField {
  ID
}

type ExerciseType implements Node {
  id: ID!
  name: String!
  properties: [String!]!
  description: String!
  exercises(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Exercises returned from the connection."""
    orderBy: ExerciseOrder

    """Filtering options for Exercises returned from the connection."""
    where: ExerciseWhereInput
  ): ExerciseConnection!
}

"""A connection to a list of items."""
type ExerciseTypeConnection {
  """A list of edges."""
  edges: [ExerciseTypeEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type ExerciseTypeEdge {
  """The item at the end of the edge."""
  node: ExerciseType

  """A cursor for use in pagination."""
  cursor: Cursor!
}

"""Ordering options for ExerciseType connections"""
input ExerciseTypeOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC

  """The field by which to order ExerciseTypes."""
  field: ExerciseTypeOrderField!
}

"""Properties by which ExerciseType connections can be ordered."""
enum ExerciseTypeOrderField {
  ID
}

"""
ExerciseTypeWhereInput is used for filtering ExerciseType objects.
Input was generated by ent.
"""
input ExerciseTypeWhereInput {
  not: ExerciseTypeWhereInput
  and: [ExerciseTypeWhereInput!]
  or: [ExerciseTypeWhereInput!]

  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID

  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String

  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String

  """exercises edge predicates"""
  hasExercises: Boolean
  hasExercisesWith: [ExerciseWhereInput!]
}

"""
ExerciseWhereInput is used for filtering Exercise objects.
Input was generated by ent.
"""
input ExerciseWhereInput {
  not: ExerciseWhereInput
  and: [ExerciseWhereInput!]
  or: [ExerciseWhereInput!]

  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID

  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String

  """how_to field predicates"""
  howTo: String
  howToNEQ: String
  howToIn: [String!]
  howToNotIn: [String!]
  howToGT: String
  howToGTE: String
  howToLT: String
  howToLTE: String
  howToContains: String
  howToHasPrefix: String
  howToHasSuffix: String
  howToIsNil: Boolean
  howToNotNil: Boolean
  howToEqualFold: String
  howToContainsFold: String

  """user_id field predicates"""
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  userIDGT: ID
  userIDGTE: ID
  userIDLT: ID
  userIDLTE: ID
  userIDContains: ID
  userIDHasPrefix: ID
  userIDHasSuffix: ID
  userIDIsNil: Boolean
  userIDNotNil: Boolean
  userIDEqualFold: ID
  userIDContainsFold: ID

  """workout_logs edge predicates"""
  hasWorkoutLogs: Boolean
  hasWorkoutLogsWith: [WorkoutLogWhereInput!]

  """users edge predicates"""
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]

  """equipment edge predicates"""
  hasEquipment: Boolean
  hasEquipmentWith: [EquipmentWhereInput!]

  """muscles_groups edge predicates"""
  hasMusclesGroups: Boolean
  hasMusclesGroupsWith: [MusclesGroupWhereInput!]

  """exercise_types edge predicates"""
  hasExerciseTypes: Boolean
  hasExerciseTypesWith: [ExerciseTypeWhereInput!]

  """routines edge predicates"""
  hasRoutines: Boolean
  hasRoutinesWith: [RoutineWhereInput!]

  """routine_exercises edge predicates"""
  hasRoutineExercises: Boolean
  hasRoutineExercisesWith: [RoutineExerciseWhereInput!]
}

type Image {
  height: Float
  aspectRatio: Float
  width: Int
  layout: String!
  priority: Boolean!
  objectFit: String!
  src: String!
  srcset: String!
  breakpoints: [Int]
  style: Style!
  loading: String
  fetchPriority: String
  decoding: String
  alt: String
  role: String
  sizes: String
}

input ImageInput {
  height: Float
  aspectRatio: Float
  width: Int
  layout: String!
  priority: Boolean!
  objectFit: String!
  filename: String!
  breakPoints: [Int!]
}

input LoginInput {
  email: String!
  password: String!
}

type MusclesGroup implements Node {
  id: ID!
  name: String!
  image: Image
  exercises(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Exercises returned from the connection."""
    orderBy: ExerciseOrder

    """Filtering options for Exercises returned from the connection."""
    where: ExerciseWhereInput
  ): ExerciseConnection!
}

"""A connection to a list of items."""
type MusclesGroupConnection {
  """A list of edges."""
  edges: [MusclesGroupEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type MusclesGroupEdge {
  """The item at the end of the edge."""
  node: MusclesGroup

  """A cursor for use in pagination."""
  cursor: Cursor!
}

"""Ordering options for MusclesGroup connections"""
input MusclesGroupOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC

  """The field by which to order MusclesGroups."""
  field: MusclesGroupOrderField!
}

"""Properties by which MusclesGroup connections can be ordered."""
enum MusclesGroupOrderField {
  ID
}

"""
MusclesGroupWhereInput is used for filtering MusclesGroup objects.
Input was generated by ent.
"""
input MusclesGroupWhereInput {
  not: MusclesGroupWhereInput
  and: [MusclesGroupWhereInput!]
  or: [MusclesGroupWhereInput!]

  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID

  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String

  """exercises edge predicates"""
  hasExercises: Boolean
  hasExercisesWith: [ExerciseWhereInput!]
}

type Mutation {
  createUser(input: CreateUserInput!): User!
  activateUser(input: ActivateUserInput!): AuthenticationToken!
  updateUserPassword(input: ResetUserPasswordInput!): User!
  createAuthenticationToken(input: LoginInput!): AuthenticationToken!
  createActivationToken(input: ActivationTokenInput!): User!
  createPasswordResetToken(input: ResetPasswordInput!): User!
  createRoutineWithChildren(input: CreateRoutineWithChildrenInput!): Routine!
  createRoutine(input: CreateRoutineInput!): Routine
  deleteRoutine(id: ID!): DeletedID
  createMusclesGroup(input: CreateMusclesGroupInput!): MusclesGroup!
  createExercise(input: CreateExerciseInput!): Exercise!
  deleteExercise(input: DeleteExerciseInput!): Exercise!
  createExerciseType(input: CreateExerciseTypeInput!): ExerciseType!
}

"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC

  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}

"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  equipmentSlice(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for EquipmentSlice returned from the connection."""
    orderBy: EquipmentOrder

    """Filtering options for EquipmentSlice returned from the connection."""
    where: EquipmentWhereInput
  ): EquipmentConnection!
  exercises(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Exercises returned from the connection."""
    orderBy: ExerciseOrder

    """Filtering options for Exercises returned from the connection."""
    where: ExerciseWhereInput
  ): ExerciseConnection!
  exerciseTypes(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for ExerciseTypes returned from the connection."""
    orderBy: ExerciseTypeOrder

    """Filtering options for ExerciseTypes returned from the connection."""
    where: ExerciseTypeWhereInput
  ): ExerciseTypeConnection!
  musclesGroups(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for MusclesGroups returned from the connection."""
    orderBy: MusclesGroupOrder

    """Filtering options for MusclesGroups returned from the connection."""
    where: MusclesGroupWhereInput
  ): MusclesGroupConnection!
  routines(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Routines returned from the connection."""
    orderBy: RoutineOrder

    """Filtering options for Routines returned from the connection."""
    where: RoutineWhereInput
  ): RoutineConnection!
  routineExercises(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for RoutineExercises returned from the connection."""
    orderBy: RoutineExerciseOrder

    """Filtering options for RoutineExercises returned from the connection."""
    where: RoutineExerciseWhereInput
  ): RoutineExerciseConnection!
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Users returned from the connection."""
    orderBy: UserOrder

    """Filtering options for Users returned from the connection."""
    where: UserWhereInput
  ): UserConnection!
  workouts(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Workouts returned from the connection."""
    orderBy: WorkoutOrder

    """Filtering options for Workouts returned from the connection."""
    where: WorkoutWhereInput
  ): WorkoutConnection!
  workoutLogs(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for WorkoutLogs returned from the connection."""
    orderBy: WorkoutLogOrder

    """Filtering options for WorkoutLogs returned from the connection."""
    where: WorkoutLogWhereInput
  ): WorkoutLogConnection!
  viewer: User
}

input ResetPasswordInput {
  email: String!
}

input ResetUserPasswordInput {
  password: String!
  tokenPlainText: String!
}

type Routine implements Node {
  id: ID!
  name: String!
  userID: ID!
  exercises(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Exercises returned from the connection."""
    orderBy: ExerciseOrder

    """Filtering options for Exercises returned from the connection."""
    where: ExerciseWhereInput
  ): ExerciseConnection!
  users: User!
  routineExercises(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for RoutineExercises returned from the connection."""
    orderBy: RoutineExerciseOrder

    """Filtering options for RoutineExercises returned from the connection."""
    where: RoutineExerciseWhereInput
  ): RoutineExerciseConnection!
}

"""A connection to a list of items."""
type RoutineConnection {
  """A list of edges."""
  edges: [RoutineEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type RoutineEdge {
  """The item at the end of the edge."""
  node: Routine

  """A cursor for use in pagination."""
  cursor: Cursor!
}

type RoutineExercise implements Node {
  id: ID!
  restTimer: String
  sets: [Set!]!
  routineID: ID!
  exerciseID: ID!
  userID: ID!
  routines: Routine!
  exercises: Exercise!
  users: User!
}

"""A connection to a list of items."""
type RoutineExerciseConnection {
  """A list of edges."""
  edges: [RoutineExerciseEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type RoutineExerciseEdge {
  """The item at the end of the edge."""
  node: RoutineExercise

  """A cursor for use in pagination."""
  cursor: Cursor!
}

"""Ordering options for RoutineExercise connections"""
input RoutineExerciseOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC

  """The field by which to order RoutineExercises."""
  field: RoutineExerciseOrderField!
}

"""Properties by which RoutineExercise connections can be ordered."""
enum RoutineExerciseOrderField {
  ID
}

"""
RoutineExerciseWhereInput is used for filtering RoutineExercise objects.
Input was generated by ent.
"""
input RoutineExerciseWhereInput {
  not: RoutineExerciseWhereInput
  and: [RoutineExerciseWhereInput!]
  or: [RoutineExerciseWhereInput!]

  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID

  """rest_timer field predicates"""
  restTimer: String
  restTimerNEQ: String
  restTimerIn: [String!]
  restTimerNotIn: [String!]
  restTimerGT: String
  restTimerGTE: String
  restTimerLT: String
  restTimerLTE: String
  restTimerContains: String
  restTimerHasPrefix: String
  restTimerHasSuffix: String
  restTimerIsNil: Boolean
  restTimerNotNil: Boolean
  restTimerEqualFold: String
  restTimerContainsFold: String
}

"""Ordering options for Routine connections"""
input RoutineOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC

  """The field by which to order Routines."""
  field: RoutineOrderField!
}

"""Properties by which Routine connections can be ordered."""
enum RoutineOrderField {
  ID
}

"""
RoutineWhereInput is used for filtering Routine objects.
Input was generated by ent.
"""
input RoutineWhereInput {
  not: RoutineWhereInput
  and: [RoutineWhereInput!]
  or: [RoutineWhereInput!]

  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID

  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String

  """user_id field predicates"""
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  userIDGT: ID
  userIDGTE: ID
  userIDLT: ID
  userIDLTE: ID
  userIDContains: ID
  userIDHasPrefix: ID
  userIDHasSuffix: ID
  userIDEqualFold: ID
  userIDContainsFold: ID

  """exercises edge predicates"""
  hasExercises: Boolean
  hasExercisesWith: [ExerciseWhereInput!]

  """users edge predicates"""
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]

  """routine_exercises edge predicates"""
  hasRoutineExercises: Boolean
  hasRoutineExercisesWith: [RoutineExerciseWhereInput!]
}

type Set {
  set: Int!
  reps: Int
  kg: Int
  time: String
  km: Int
}

input SetInput {
  set: Int!
  reps: Int
  kg: Int
  time: String
  km: Int
}

type Style {
  width: String
  height: String
  maxWidth: String
  maxHeight: String
  aspectRatio: String
}

type Token implements Node {
  id: ID!
  expiry: String!
  scope: String!
  userID: ID!
  users: User!
}

"""Ordering options for Token connections"""
input TokenOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC

  """The field by which to order Tokens."""
  field: TokenOrderField!
}

"""Properties by which Token connections can be ordered."""
enum TokenOrderField {
  ID
}

"""
TokenWhereInput is used for filtering Token objects.
Input was generated by ent.
"""
input TokenWhereInput {
  not: TokenWhereInput
  and: [TokenWhereInput!]
  or: [TokenWhereInput!]

  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID

  """expiry field predicates"""
  expiry: String
  expiryNEQ: String
  expiryIn: [String!]
  expiryNotIn: [String!]
  expiryGT: String
  expiryGTE: String
  expiryLT: String
  expiryLTE: String
  expiryContains: String
  expiryHasPrefix: String
  expiryHasSuffix: String
  expiryEqualFold: String
  expiryContainsFold: String

  """scope field predicates"""
  scope: String
  scopeNEQ: String
  scopeIn: [String!]
  scopeNotIn: [String!]
  scopeGT: String
  scopeGTE: String
  scopeLT: String
  scopeLTE: String
  scopeContains: String
  scopeHasPrefix: String
  scopeHasSuffix: String
  scopeEqualFold: String
  scopeContainsFold: String

  """user_id field predicates"""
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  userIDGT: ID
  userIDGTE: ID
  userIDLT: ID
  userIDLTE: ID
  userIDContains: ID
  userIDHasPrefix: ID
  userIDHasSuffix: ID
  userIDEqualFold: ID
  userIDContainsFold: ID

  """users edge predicates"""
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
}

"""
UpdateExerciseTypeInput is used for update ExerciseType object.
Input was generated by ent.
"""
input UpdateExerciseTypeInput {
  name: String
  properties: [String!]
  appendProperties: [String!]
  description: String
  addExerciseIDs: [ID!]
  removeExerciseIDs: [ID!]
  clearExercises: Boolean
}

"""
UpdateRoutineInput is used for update Routine object.
Input was generated by ent.
"""
input UpdateRoutineInput {
  name: String
  addExerciseIDs: [ID!]
  removeExerciseIDs: [ID!]
  clearExercises: Boolean
  usersID: ID
}

"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  email: String
  username: String
  hashedPassword: String
  name: String
  addTokenIDs: [ID!]
  removeTokenIDs: [ID!]
  clearTokens: Boolean
  addExerciseIDs: [ID!]
  removeExerciseIDs: [ID!]
  clearExercises: Boolean
  addRoutineIDs: [ID!]
  removeRoutineIDs: [ID!]
  clearRoutines: Boolean
  addWorkoutIDs: [ID!]
  removeWorkoutIDs: [ID!]
  clearWorkouts: Boolean
  addWorkoutLogIDs: [ID!]
  removeWorkoutLogIDs: [ID!]
  clearWorkoutLogs: Boolean
}

"""
UpdateWorkoutInput is used for update Workout object.
Input was generated by ent.
"""
input UpdateWorkoutInput {
  name: String
  volume: Int
  reps: Int
  time: String
  clearTime: Boolean
  sets: Int
  image: String
  clearImage: Boolean
  description: String
  usersID: ID
  addWorkoutLogIDs: [ID!]
  removeWorkoutLogIDs: [ID!]
  clearWorkoutLogs: Boolean
}

type User implements Node {
  id: ID!
  email: String!
  username: String!
  name: String!
  createdAt: String!
  activated: Int!
  version: Int!
  tokens: [Token!]
  exercises(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Exercises returned from the connection."""
    orderBy: ExerciseOrder

    """Filtering options for Exercises returned from the connection."""
    where: ExerciseWhereInput
  ): ExerciseConnection!
  routines(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Routines returned from the connection."""
    orderBy: RoutineOrder

    """Filtering options for Routines returned from the connection."""
    where: RoutineWhereInput
  ): RoutineConnection!
  workouts(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Workouts returned from the connection."""
    orderBy: WorkoutOrder

    """Filtering options for Workouts returned from the connection."""
    where: WorkoutWhereInput
  ): WorkoutConnection!
  workoutLogs(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for WorkoutLogs returned from the connection."""
    orderBy: WorkoutLogOrder

    """Filtering options for WorkoutLogs returned from the connection."""
    where: WorkoutLogWhereInput
  ): WorkoutLogConnection!
  routineExercises(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for RoutineExercises returned from the connection."""
    orderBy: RoutineExerciseOrder

    """Filtering options for RoutineExercises returned from the connection."""
    where: RoutineExerciseWhereInput
  ): RoutineExerciseConnection!
}

"""A connection to a list of items."""
type UserConnection {
  """A list of edges."""
  edges: [UserEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User

  """A cursor for use in pagination."""
  cursor: Cursor!
}

"""Ordering options for User connections"""
input UserOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC

  """The field by which to order Users."""
  field: UserOrderField!
}

"""Properties by which User connections can be ordered."""
enum UserOrderField {
  ID
}

"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]

  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID

  """email field predicates"""
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String

  """username field predicates"""
  username: String
  usernameNEQ: String
  usernameIn: [String!]
  usernameNotIn: [String!]
  usernameGT: String
  usernameGTE: String
  usernameLT: String
  usernameLTE: String
  usernameContains: String
  usernameHasPrefix: String
  usernameHasSuffix: String
  usernameEqualFold: String
  usernameContainsFold: String

  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String

  """created_at field predicates"""
  createdAt: String
  createdAtNEQ: String
  createdAtIn: [String!]
  createdAtNotIn: [String!]
  createdAtGT: String
  createdAtGTE: String
  createdAtLT: String
  createdAtLTE: String
  createdAtContains: String
  createdAtHasPrefix: String
  createdAtHasSuffix: String
  createdAtEqualFold: String
  createdAtContainsFold: String

  """activated field predicates"""
  activated: Int
  activatedNEQ: Int
  activatedIn: [Int!]
  activatedNotIn: [Int!]
  activatedGT: Int
  activatedGTE: Int
  activatedLT: Int
  activatedLTE: Int

  """version field predicates"""
  version: Int
  versionNEQ: Int
  versionIn: [Int!]
  versionNotIn: [Int!]
  versionGT: Int
  versionGTE: Int
  versionLT: Int
  versionLTE: Int

  """tokens edge predicates"""
  hasTokens: Boolean
  hasTokensWith: [TokenWhereInput!]

  """exercises edge predicates"""
  hasExercises: Boolean
  hasExercisesWith: [ExerciseWhereInput!]

  """routines edge predicates"""
  hasRoutines: Boolean
  hasRoutinesWith: [RoutineWhereInput!]

  """workouts edge predicates"""
  hasWorkouts: Boolean
  hasWorkoutsWith: [WorkoutWhereInput!]

  """workout_logs edge predicates"""
  hasWorkoutLogs: Boolean
  hasWorkoutLogsWith: [WorkoutLogWhereInput!]

  """routine_exercises edge predicates"""
  hasRoutineExercises: Boolean
  hasRoutineExercisesWith: [RoutineExerciseWhereInput!]
}

type Workout implements Node {
  id: ID!
  name: String!
  volume: Int!
  reps: Int!
  time: String
  sets: Int!
  createdAt: String!
  image: String
  description: String!
  userID: ID!
  users: User!
  workoutLogs(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for WorkoutLogs returned from the connection."""
    orderBy: WorkoutLogOrder

    """Filtering options for WorkoutLogs returned from the connection."""
    where: WorkoutLogWhereInput
  ): WorkoutLogConnection!
}

"""A connection to a list of items."""
type WorkoutConnection {
  """A list of edges."""
  edges: [WorkoutEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type WorkoutEdge {
  """The item at the end of the edge."""
  node: Workout

  """A cursor for use in pagination."""
  cursor: Cursor!
}

type WorkoutLog implements Node {
  id: ID!
  sets: [Set!]!
  createdAt: String!
  userID: ID!
  users: User!
  exercises: Exercise
  workouts: Workout
}

"""A connection to a list of items."""
type WorkoutLogConnection {
  """A list of edges."""
  edges: [WorkoutLogEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type WorkoutLogEdge {
  """The item at the end of the edge."""
  node: WorkoutLog

  """A cursor for use in pagination."""
  cursor: Cursor!
}

"""Ordering options for WorkoutLog connections"""
input WorkoutLogOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC

  """The field by which to order WorkoutLogs."""
  field: WorkoutLogOrderField!
}

"""Properties by which WorkoutLog connections can be ordered."""
enum WorkoutLogOrderField {
  ID
}

"""
WorkoutLogWhereInput is used for filtering WorkoutLog objects.
Input was generated by ent.
"""
input WorkoutLogWhereInput {
  not: WorkoutLogWhereInput
  and: [WorkoutLogWhereInput!]
  or: [WorkoutLogWhereInput!]

  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID

  """created_at field predicates"""
  createdAt: String
  createdAtNEQ: String
  createdAtIn: [String!]
  createdAtNotIn: [String!]
  createdAtGT: String
  createdAtGTE: String
  createdAtLT: String
  createdAtLTE: String
  createdAtContains: String
  createdAtHasPrefix: String
  createdAtHasSuffix: String
  createdAtEqualFold: String
  createdAtContainsFold: String

  """user_id field predicates"""
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  userIDGT: ID
  userIDGTE: ID
  userIDLT: ID
  userIDLTE: ID
  userIDContains: ID
  userIDHasPrefix: ID
  userIDHasSuffix: ID
  userIDEqualFold: ID
  userIDContainsFold: ID

  """users edge predicates"""
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]

  """exercises edge predicates"""
  hasExercises: Boolean
  hasExercisesWith: [ExerciseWhereInput!]

  """workouts edge predicates"""
  hasWorkouts: Boolean
  hasWorkoutsWith: [WorkoutWhereInput!]
}

"""Ordering options for Workout connections"""
input WorkoutOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC

  """The field by which to order Workouts."""
  field: WorkoutOrderField!
}

"""Properties by which Workout connections can be ordered."""
enum WorkoutOrderField {
  ID
}

"""
WorkoutWhereInput is used for filtering Workout objects.
Input was generated by ent.
"""
input WorkoutWhereInput {
  not: WorkoutWhereInput
  and: [WorkoutWhereInput!]
  or: [WorkoutWhereInput!]

  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID

  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String

  """volume field predicates"""
  volume: Int
  volumeNEQ: Int
  volumeIn: [Int!]
  volumeNotIn: [Int!]
  volumeGT: Int
  volumeGTE: Int
  volumeLT: Int
  volumeLTE: Int

  """reps field predicates"""
  reps: Int
  repsNEQ: Int
  repsIn: [Int!]
  repsNotIn: [Int!]
  repsGT: Int
  repsGTE: Int
  repsLT: Int
  repsLTE: Int

  """time field predicates"""
  time: String
  timeNEQ: String
  timeIn: [String!]
  timeNotIn: [String!]
  timeGT: String
  timeGTE: String
  timeLT: String
  timeLTE: String
  timeContains: String
  timeHasPrefix: String
  timeHasSuffix: String
  timeIsNil: Boolean
  timeNotNil: Boolean
  timeEqualFold: String
  timeContainsFold: String

  """sets field predicates"""
  sets: Int
  setsNEQ: Int
  setsIn: [Int!]
  setsNotIn: [Int!]
  setsGT: Int
  setsGTE: Int
  setsLT: Int
  setsLTE: Int

  """created_at field predicates"""
  createdAt: String
  createdAtNEQ: String
  createdAtIn: [String!]
  createdAtNotIn: [String!]
  createdAtGT: String
  createdAtGTE: String
  createdAtLT: String
  createdAtLTE: String
  createdAtContains: String
  createdAtHasPrefix: String
  createdAtHasSuffix: String
  createdAtEqualFold: String
  createdAtContainsFold: String

  """image field predicates"""
  image: String
  imageNEQ: String
  imageIn: [String!]
  imageNotIn: [String!]
  imageGT: String
  imageGTE: String
  imageLT: String
  imageLTE: String
  imageContains: String
  imageHasPrefix: String
  imageHasSuffix: String
  imageIsNil: Boolean
  imageNotNil: Boolean
  imageEqualFold: String
  imageContainsFold: String

  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String

  """user_id field predicates"""
  userID: ID
  userIDNEQ: ID
  userIDIn: [ID!]
  userIDNotIn: [ID!]
  userIDGT: ID
  userIDGTE: ID
  userIDLT: ID
  userIDLTE: ID
  userIDContains: ID
  userIDHasPrefix: ID
  userIDHasSuffix: ID
  userIDEqualFold: ID
  userIDContainsFold: ID

  """users edge predicates"""
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]

  """workout_logs edge predicates"""
  hasWorkoutLogs: Boolean
  hasWorkoutLogsWith: [WorkoutLogWhereInput!]
}
